<?php

use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use Drupal\isueo_helpers\ISUEOHelpers;

/**
 * Implements hook_rebuild().
 */
function plp_programs_rebuild()
{
  plp_programs_getprograms();
}

/**
 * Implements hook_cron().
 */
function plp_programs_cron()
{
  plp_programs_getprograms();
}

function plp_programs_getprograms()
{
  // Get the products/programs feed, if it's empty, wait 1 second and try again
  $raw = ISUEOHelpers\Files::fetch_url('https://datastore.exnet.iastate.edu/mydata/EducationalPrograms.json', true);
  if ($raw === false || strlen($raw) < 100000) {
    sleep(1);
    Drupal::logger('plp_programs')->info('Empty feed: wait 1 second and try again');
    $raw = ISUEOHelpers\Files::fetch_url('https://datastore.exnet.iastate.edu/mydata/EducationalPrograms.json', true);
  }

  $products = json_decode($raw, true);
  $programs = [];
  $children = [];
  $programIds = [];
  $nodeIds = [];
  $min_programs = 100;
  if (!is_array($products) || count($products) < $min_programs) {
    Drupal::logger('plp_programs')->info('Less than ' . $min_programs . ' programs, exiting');
    return;
  }

  // Record types to include in the catalog
  $types = ['012460000012EiaAAE'];

  // Step through products, looking for programs that should be included
  foreach ($products as $product) {
    if (!in_array($product['RecordTypeId'], $types)) {
      continue;
    }
    // Should it be included as a product, or as the child of a product
    if (empty($product['Related_Program__c'])) {
      if ($product['Show_on_Program_Catalog__c']) {
        $programs[$product['Id']] = $product;
      }
    } else {
      $children[$product['Related_Program__c']][] = $product;
    }
  }

  $events = plp_programs_get_related_items('https://datastore.exnet.iastate.edu/mydata/UpcomingProgramOfferings.json', 'Planned_Program__c', $programs);
  $measurements = plp_programs_get_related_items('https://datastore.exnet.iastate.edu/mydata/IndicatorMeasures.json', 'Planned_Program__c', $programs);
  $indicators = plp_programs_get_related_items('https://datastore.exnet.iastate.edu/mydata/EducationalProgramsIndicatorConnectors.json', 'Related_Extension_Product__c', $programs);

  $intended_audiences = ISUEOHelpers\Taxonomy::get_terms('intended_audiences');
  $program_areas = ISUEOHelpers\Taxonomy::get_terms('program_areas');
  $critical_issues = ISUEOHelpers\Taxonomy::get_terms('critical_issues');
  $interest_areas = ISUEOHelpers\Taxonomy::get_terms('interest_areas');


  // Get all existing nodes
  $nids = \Drupal::entityQuery('node')->accessCheck(false)->condition('type', 'plp_program')->execute();
  $tmpnodes =  Node::loadMultiple($nids);
  $nodes = [];
  foreach ($tmpnodes as $node) {
    $nodeIds[] = $node->field_plp_program_mydata_id->value;
    $nodes[$node->field_plp_program_mydata_id->value] = $node;
  }

  // Step through the programs feed
  foreach ($programs as $program) {

    $programIds[] = $program['Id'];
    $mynode = null;
    $save = false;

    if (!empty($nodes[$program['Id']])) {
      $mynode = $nodes[$program['Id']];
    } else {
      $mynode = Node::create(array('type' => 'plp_program', 'title' => html_entity_decode($program['Name']), 'field_plp_program_mydata_id' => $program['Id'],));
      $save = true;
    }

    // Handle Title
    if ($mynode->getTitle() != html_entity_decode($program['Name'])) {
      $mynode->setTitle(html_entity_decode($program['Name']));
      $save = true;
    }

    // Handle Body
    $body = '';
    if (!empty($program['Web_Description__c'])) {
      $body = $program['Web_Description__c'];
    } elseif (!empty($program['hed__Extended_Description__c'])) {
      $body = $program['hed__Extended_Description__c'];
    } else {
      $body = $program['hed__Description__c'];
    }
    if (!empty($program['Smugmug_ID__c'])) {
      $body = '<img class="educational_program_image" src="https://photos.smugmug.com/photos/' . $program['Smugmug_ID__c'] . '/0/XL/' . $program['Smugmug_ID__c'] . '-XL.jpg" alt="" />' . $body . '<div class="clearer"></div>';
    }
    $mynode->body->format = 'basic';
    if (!empty($program['Intended_Audiences__c'])) {
      $body .= '<p><b>Intended Audiences:</b><br />' . str_replace(';', ', ', $program['Intended_Audiences__c']) . '</p>';
    }
    if ($mynode->body->value != $body) {
      $mynode->body->value = $body;
      $mynode->body->format = 'basic';
      $save = true;
    }

    if ($mynode->body->summary != $program['hed__Description__c']) {
      $mynode->body->summary = $program['hed__Description__c'];
      $save = true;
    }

    // Handle the text fields using an array and a loop
    $fields = [
      //'field_plp_program_contact_name' => 'Contact_Information_Name__c',
      'field_plp_program_contact_phone' => 'Primary_Contact__r.Phone',
      'field_plp_program_search_terms' => 'Search_Terms__c',
      'field_plp_program_title_filter' => 'Name'
      //'field_event_program_name' => '',
    ];
    foreach ($fields as $key => $value) {
      if ($mynode->get($key)->getString() != $program[$value]) {
        $mynode->set($key, $program[$value]);
        $save = true;
      }
    }

    // Handle website link
    $mynode->field_website = array();
    $website = $program['Planned_Program_Website__c'];
    if (!empty($website)) {
      if ('htt' != substr($website, 0, 3)) {
        $website = 'https://' . $website;
      }
    }
    if ($mynode->get('field_plp_program_website')->uri != $website) {
      $mynode->set('field_plp_program_website', ['uri' => $website, 'title' => 'More about ' . $program['Name']]);
      $save = true;
    }

    // Handle taxonomy lookup fields
    $fields_single_entity_reference = [
      'field_plp_program_audiences' => ['taxonomy_array' => &$intended_audiences, 'taxonomy_id' => 'intended_audiences', 'json_element' => 'Intended_Audiences__c'],
      'field_plp_program_critical_issue' => ['taxonomy_array' => &$critical_issues, 'taxonomy_id' => 'critical_issues', 'json_element' => 'Critical_Issue__c'],
      'field_plp_program_interest_areas' => ['taxonomy_array' => &$interest_areas, 'taxonomy_id' => 'interest_areas', 'json_element' => 'Related_Interest_Areas__c'],
      'field_plp_program_program_area' => ['taxonomy_array' => &$program_areas, 'taxonomy_id' => 'program_areas', 'json_element' => 'hed__Account__r.Name'],
    ];
    foreach ($fields_single_entity_reference as $key => $value) {
      $terms = [];
      if (!empty($program[$value['json_element']])) {
        foreach (explode(';', $program[$value['json_element']]) as $new_term) {
          $term_id = ISUEOHelpers\Taxonomy::get_term_id($new_term, $value['taxonomy_array'], $value['taxonomy_id']);
          $terms[] = $term_id;
        }
      }
      if ($mynode->get($key)->getString() != implode(', ', $terms)) {
        $mynode->set($key, $terms);
        $save = true;
      }
    }

    // Handle number fields
    $number_fields = [
      'field_plp_program_num_events' => $events,
      'field_plp_program_num_indicators' => $indicators,
      'field_plp_program_num_measures' => $measurements,
    ];
    foreach ($number_fields as $key => $value) {
      $num = plp_programs_get_number_of_items($program['Id'], $value, $children);
      if ($mynode->get($key)->getString() != $num) {
        $mynode->set($key, $num);
        $save = true;
      }
    }

    // Publish the node if it's unpublished
    if (!$mynode->isPublished) {
      $mynode->setPublished();
      $save = true;
    }

    // Only save if there has been a changed, this saves a ton of time
    if ($save) {
      $mynode->save();
    }
  }

  // Find and unpublish deleted programs
  $nodes_to_unpublish = array_diff($nodeIds, $programIds);
  $nids = Drupal::entityQuery('node')->accessCheck(false)->condition('status', 1)->condition('field_plp_program_mydata_id', $nodes_to_unpublish, 'IN')->execute();

  $tmpnodes =  Node::loadMultiple($nids);
  foreach ($tmpnodes as $node) {
    $node->setUnpublished()->save();
  }
}

function plp_programs_get_related_items(string $json_url, string $field_name, array $programs) {
  $my_array = [];

  // Find measurements for the programs
  $raw = ISUEOHelpers\Files::fetch_url($json_url);
  $widgets = json_decode($raw, true);
  foreach ($widgets as $widget) {
      $my_array[$widget[$field_name]][] = $widget;
  }

  return $my_array;
}

function plp_programs_get_number_of_items(string $programid, array $items, array $children) {
  $value = 0;

  // Add in the number of items directly associated with this program
  if (array_key_exists($programid, $items)) {
    $value = $value + count($items[$programid]);
  }

  // Also add in the items associated with the children
  if (array_key_exists($programid, $children)) {
    foreach ($children[$programid] as $child) {
      if (array_key_exists($child['Id'], $items)) {
        $value = $value + count($items[$child['Id']]);
      }
    }
  }

  return $value;
}
