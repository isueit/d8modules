<?php
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use Drupal\isueo_helpers\ISUEOHelpers;

/**
 * Implements hook_rebuild().
 */
function plp_programs_rebuild()
{
  plp_programs_getprograms();
}

/**
 * Implements hook_cron().
 */
function plp_programs_cron()
{
  plp_programs_getprograms();
}

function plp_programs_getprograms()
{
  // Get the programs feed, if it's empty, wait 1 second and try again
  $raw = ISUEOHelpers\Files::fetch_url('https://datastore.exnet.iastate.edu/mydata/EducationalPrograms.json');

  if ($raw === false || strlen($raw) < 100000) {
    sleep(1);
    Drupal::logger('plp_programs')->info('Empty feed: wait 1 second and try again');
    $raw = ISUEOHelpers\Files::fetch_url('https://datastore.exnet.iastate.edu/mydata/EducationalPrograms.json');
  }
  $programs = json_decode($raw, true);
  $programIds = [];
  $nodeIds = [];
  $min_programs = 100;
  if (!is_array($programs) || count($programs) < $min_programs) {
    Drupal::logger('plp_programs')->info('Less than ' . $min_programs . ' programs, exiting');
    return;
  }

  $intended_audiences = plp_programs_get_taxonomomy_terms('intended_audiences', $programs, 'Intended_Audiences__c');
  $program_areas = plp_programs_get_taxonomomy_terms('program_areas', $programs, 'hed__Account__r.Name');
  $critical_issues = plp_programs_get_taxonomomy_terms('critical_issues', $programs, 'Critical_Issue__c');
  $interest_areas = plp_programs_get_taxonomomy_terms('interest_areas', $programs, 'Related_Interest_Areas__c');

  // Get all existing nodes
  $nids = \Drupal::entityQuery('node')->condition('type', 'plp_program')->execute();
  $tmpnodes =  Node::loadMultiple($nids);
  $nodes = [];
  foreach ($tmpnodes as $node) {
    $nodeIds[] = $node->field_program_mydata_id->value;
    $nodes[$node->field_program_mydata_id->value] = $node;
  }

  // Record types to include in the catalog
  $types = ['012460000012EiaAAE'];

  // Step through the programs feed
  foreach ($programs as $program) {
    if (!$program['Show_on_Program_Catalog__c'] || !in_array($program['RecordTypeId'], $types)) {
      continue;
    }

    $programIds[] = $program['Id'];
    $mynode = null;
    $save = false;

    if (!empty($nodes[$program['Id']])) {
      $mynode = $nodes[$program['Id']];
    } else {
      $mynode = Node::create(array('type' => 'plp_program', 'title' => html_entity_decode($program['Name']), 'field_program_mydata_id' => $program['Id'],));
      $save = true;
    }

    // Handle Title
    if ($mynode->getTitle() != html_entity_decode($program['Name'])) {
      $mynode->setTitle(html_entity_decode($program['Name']));
      $save = true;
    }

    // Handle Body
    $body = '';
    if (!empty($program['Web_Description__c'])) {
      $body = $program['Web_Description__c'];
    } elseif (!empty($program['hed__Extended_Description__c'])) {
      $body = $program['hed__Extended_Description__c'];
    } else {
      $body = $program['hed__Description__c'];
    }
    if (!empty($program['Smugmug_ID__c'])) {
      $body = '<img class="educational_program_image" src="https://photos.smugmug.com/photos/' . $program['Smugmug_ID__c'] . '/0/XL/' . $program['Smugmug_ID__c'] . '-XL.jpg" alt="" />' . $body . '<div class="clearer"></div>';
    }
    $mynode->body->format = 'basic';
    if (!empty($program['Intended_Audiences__c'])) {
      $body .= '<p><b>Intended Audiences:</b><br />' . str_replace(';', ', ', $program['Intended_Audiences__c']) . '</p>';
    }
    if ($mynode->body->value != $body) {
      $mynode->body->value = $body;
      $mynode->body->format = 'basic';
      $save = true;
    }

    if ($mynode->body->summary != $program['hed__Description__c']) {
      $mynode->body->summary = $program['hed__Description__c'];
      $save = true;
    }



    // Handle the text fields using an array and a loop
    $fields = [
      //'field_program_contact_name' => 'Contact_Information_Name__c',
      'field_program_contact_phone' => 'Primary_Contact__r.Phone',
      'field_program_search_terms' => 'Search_Terms__c',
      'field_program_title_filter' => 'Name'
      //'field_event_program_name' => '',
    ];
    foreach ($fields as $key => $value) {
      if ($mynode->get($key)->getString() != $program[$value]) {
        $mynode->set($key, $program[$value]);
        $save = true;
      }
    }


    // Handle website link
    $mynode->field_website = array();
    $website = $program['Planned_Program_Website__c'];
    if (!empty($website)) {
      if ('htt' != substr($website, 0, 3)) {
        $website = 'https://' . $website;
      }
    }
    if ($mynode->get('field_program_website')->uri != $website) {
      $mynode->set('field_program_website', ['uri' => $website, 'title' => 'More about ' . $program['Name']]);
      $save = true;
    }

    $fields_single_entity_reference = [
      'field_program_program_area' => ['hed__Account__r.Name', 'program_areas', $program_areas],
      'field_program_critical_issue' => ['Critical_Issue__c', 'critical_issues', $critical_issues],
      'field_program_interest_areas' => ['Related_Interest_Areas__c', 'interest_areas', $interest_areas],
    ];

    foreach ($fields_single_entity_reference as $key => $value) {
      $terms = [];
      if (!empty($program[$value[0]])) {
        foreach (explode(';', $program[$value[0]]) as $new_term) {
          if (array_key_exists($new_term, $value[2])) {
            $terms[] = $value[2][$new_term];
          }
        }
      }
      if ($mynode->get($key)->getString() != implode(', ', $terms)) {
        $mynode->set($key, $terms);
        $save = true;
      }
    }

    // Only save if there has been a changed, this saves a ton of time
    if ($save) {
      $mynode->save();
    }
  }
}


// Get all taxonomy terms in a taxonomy, including new ones that might be in the feed...
function plp_programs_get_taxonomomy_terms($taxonomy_id, $feed, $field)
{
  // Load Existing terms
  $found = [];
  $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($taxonomy_id);
  foreach ($terms as $term) {
    $found[$term->name] = $term->tid;
  }

  // Check the feed for new terms, and create them if necessary
  foreach ($feed as $element) {
    if (!empty($element[$field])) {
      $feed_items = explode(';', $element[$field]);
      foreach ($feed_items as $element) {
        if (!str_contains($element, ' County Extension') && !array_key_exists($element, $found)) {
          $new = Term::create(['name' => $element, 'vid' => $taxonomy_id]);
          $new->save();
          $found[$element] = $new->id();
        }
      }
    }
  }

  return $found;
}
