<?php

use \Drupal\node\Entity\Node;
use \Drupal\user\Entity\User;
use Drupal\isueo_helpers\ISUEOHelpers;


/**
* Implements hook_cron().
*/
function sync_web_authors_cron() {
  sync_web_authors_users();
}

/**
* Implements hook_rebuild().
*/
function sync_web_authors_rebuild() {
  sync_web_authors_users();
}

/**
 * sync remote and local user permissions
 */
function sync_web_authors_users() {
  $config = \Drupal::config('sync_web_authors.settings');
  if (empty($config->get('sync_url'))) {
    \Drupal::logger('sync_web_authors')->warning('Need to set a URL for the JSON feed to Sync Users');
    return;
  }

  // Get profiles from feed
  $feedurl = $config->get('sync_url');
  $fromFeed = ISUEOHelpers\Files::fetch_url($feedurl);
  $profiles = json_decode($fromFeed, TRUE);

  $handled = [];
  $now = time();

  foreach ($profiles as $profile) {
    $profilename = $profile['field_staff_profile_netid'];

    // Feed could have duplicates, only need to handle each feed profile once
    if (!in_array($profilename, $handled)) {
      $handled[] = $profilename;

      // Check if user exists
      //     if (in_array($profilename, $users)) {
      if ($user = user_load_by_name($profilename)) {
        // Update existing user
        $user->changed->value = $now;
        $user->addRole('content_editor');
        $user->field_from_feed = 1;
        $user->activate();
        $user->save();
      } else {
        // Create new user
        $user = User::create();
        $user->setUsername($profilename);
        $user->setPassword(pass_string(40));
        $user->setEmail($profilename.'@iastate.edu');

        $user->changed->value = $now;
        $user->addRole('content_editor');
        $user->field_from_feed = 1;
        $user->activate();
        $user->save();
      }
    }
  }

  // Get Stale Users
  //$nids = \Drupal::entityQuery('user')->execute();
  $nids = \Drupal::entityQuery('user')->accessCheck(FALSE)->condition('field_from_feed', 1)->condition('changed', $now, '<')->condition('status', 1)->execute();
  $staleusers =  User::loadMultiple($nids);
  foreach ($staleusers as $user) {
    if ($user->id() == 1) continue;

    // Block the user
    $user->changed->value = $now;
    $user->removeRole('content_editor');
    $user->block();
    $user->save();

    Drupal::logger('sync_web_authors')->info('Blocked user: ' . $user->getAccountName());
  }

}

function pass_string($strength = 40) {
  $chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ?!@#$%&*()_+-=';
  $length = strlen($chars);
  $rand_string = '';
  try {
    for ($i=0; $i < $strength; $i++) {
      $rand_char = $chars[random_int(0, $length-1)];
      $rand_string .= $rand_char;
    }
  } catch (\Exception $e) {
    //In cases where getrandom(2) or /dev/urandom fails, not cryptographically secure
    $rand_string = '';
    for ($i=0; $i < $strength; $i++) {
      $rand_char = $chars[mt_rand(0, $length-1)];
      $rand_string .= $rand_char;
    }
  }
  return $rand_string;
}
