<?php

/**
 * @file
 * Enhances the token API in core: adds a browseable UI, missing tokens, etc.
 */

//use Drupal\Component\Render\PlainTextOutput;
//use Drupal\Core\Block\BlockPluginInterface;

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Form\FormStateInterface;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
//use Drupal\Core\Menu\MenuLinkInterface;
//use Drupal\Core\Render\BubbleableMetadata;
//use Drupal\Core\Render\Element;
//use Drupal\Core\Routing\RouteMatchInterface;
//use Drupal\Core\Entity\EntityTypeInterface;
//use Drupal\Core\Field\BaseFieldDefinition;
//use Drupal\Core\TypedData\TranslatableInterface;
//use Drupal\menu_link_content\Entity\MenuLinkContent;
//use Drupal\menu_link_content\MenuLinkContentInterface;
//use Drupal\node\Entity\Node;
//use Drupal\node\NodeInterface;
use Drupal\pubs_entity_type\Entity\PubsEntity;
use Drupal\isueo_helpers\ISUEOHelpers;

//use \Drupal\pubs_entity_type\Form;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function pubs_entity_from_feed_form_pubs_entity_settings_alter(&$form, FormStateInterface $form_state) {

  $config = \Drupal::config('pubs_entity_type.settings');

  $form['pubs_json_feed'] = array(
    '#type' => 'textfield',
    '#title' => t('Publications Feed URL'),
    '#description' => t('URL of page that will return JSON feed of publications.'),
    '#default_value' => $config->get('pubs_json_feed'),
    '#maxlength' => 256,
    '#size' => 64,
  );

  $form['#submit'][] = 'pubs_entity_from_feed_form_pubs_entity_settings_save';
  $form['#validate'][] = 'pubs_entity_from_feed_form_pubs_entity_settings_validate';

}

/**
 * Save function for the hook_form_FORM_ID_alter().
 */
function pubs_entity_from_feed_form_pubs_entity_settings_save(&$form, FormStateInterface $form_state) {
  $config = \Drupal::service('config.factory')->getEditable('pubs_entity_type.settings');
  $config->set('pubs_json_feed', $form_state->getValue('pubs_json_feed'))->save();
}

/**
 * Validate function for the hook_form_FORM_ID_alter().
 */
function pubs_entity_from_feed_form_pubs_entity_settings_validate(&$form, FormStateInterface $form_state) {
  // Check for valid URL
  $url = $form_state->getValue('pubs_json_feed');
  if (filter_var($url, FILTER_VALIDATE_URL) === FALSE) {
    $form_state->setErrorByName('pubs_json_feed', t('Not a valid URL'));
  }

  // Check for valid host, not sure if we need this test...
  $host = parse_url($url, PHP_URL_HOST);
  if (!($host == 'local.test' || $host == 'localhost' || $host == 'store.extension.iastate.edu' || $host == 'www.preview.extension.iastate.edu')) {
    $form_state->setErrorByName('pubs_json_feed', $host . t(' is an invalid hostname'));
  }
}

/**
 * Implements hook_rebuild().
 */
function pubs_entity_from_feed_rebuild() {
  $config = \Drupal::config('pubs_entity_type.settings');
  $feed_url = $config->get('pubs_json_feed');
  $raw = ISUEOHelpers\Files::fetch_url($feed_url);
  $products = json_decode($raw, TRUE);
  $count = 0;

  foreach ($products as $product) {
    $count--;
    $found_entities = \Drupal::entityQuery('pubs_entity')->accessCheck(false)->condition('field_product_id', $product['ProductID'])->execute();

    if (empty($found_entities)) {
      $myentity = PubsEntity::create([
        'field_product_id' => $product['ProductID'],
        'field_from_feed' => TRUE,
        'weight' => $count,
      ]);
    } else {
      $myentity = PubsEntity::load(array_values($found_entities)[0]);
    }

    if ($myentity->get('field_from_feed')->getString() == TRUE) {
      $myentity->set('weight', $count);
    }
    $myentity->set('name', $product['Title']);
    $myentity->set('field_image_url', str_replace('_T', '_F', $product['ThumbnailURI']));
    $pub_date = explode('/', $product['PubDate']);
    $myentity->set('field_publication_date', $pub_date[1] . '-' . $pub_date[0] . '-01');
    $myentity->save();

  }

  $mydate = new DrupalDateTime('now');
  $mydate->sub(new DateInterval('PT5M'));

  $old_ids= \Drupal::entityQuery('pubs_entity')->accessCheck(false)->condition('field_from_feed', TRUE)->condition('changed', $mydate->format('U'), '<')->execute();
  $old_entities = PubsEntity::loadMultiple($old_ids);
  foreach($old_entities as $entity) {
    \Drupal::logger('pubs_entity_from_feed')->info($entity->get('name')->getString());
    $entity->delete();
  }

}
  /**
   * Pull in pubs entities from feed based on feed url
   */
/*
  public function createPubsFromUrl($url) {
    $url_host = parse_url($url, PHP_URL_HOST);
    //Only allow approved hosts
    if ($url_host == 'store.extension.iastate.edu' || $url_host == 'localhost') {
      try {
        $raw = file_get_contents($url);
        $items = json_decode($raw, TRUE);
        $entity_config = \Drupal::service('config.factory')->getEditable('pubs_entity_type.settings');
        $saved_url = $entity_config->get('pubs_details_url');
        $entity_config->set('pubs_details_url', $url);
        $entity_config->save();

        foreach ($items as $item) {
          //Prevent duplicates
          $existing = \Drupal::entityTypeManager()->getStorage('pubs_entity')->loadByProperties(['field_product_id' => $item['productID']]);
          if (count($existing) == 0) {
            $newEntity = \Drupal\pubs_entity_type\Entity\PubsEntity::create([
              'field_product_id' => $item['productID'],
              'field_from_feed' => 1,
            ]);//Post save finds the other fields
            $newEntity->setPublished();
            $newEntity->save();
          }
        }
        $entity_config->set('pubs_details_url', $saved_url);
        $entity_config->save();
      } catch (\Exception $e) {
        $entity_config->set('pubs_details_url', $saved_url);
        $entity_config->save();
        \Drupal::messenger()->addStatus(t('An Error occured pulling data from the given url'), 'error');
      }
    } else {
      \Drupal::messenger()->addStatus(t('Only feeds from Extension Store allowed'), 'error');
    }
  }
*/

/**
* Implements hook_cron().
*/

function pubs_entity_from_feed_cron() {
  pubs_entity_from_feed_rebuild();
}
