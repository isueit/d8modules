<?php

use Drupal\isueo_helpers\ISUEOHelpers;

/**
 * Validate entity in form and entity
 */
function validatePubsEntity($validateID, $curEntity) {
  $filter_options = array('options' => array('min_range' => 0));
  if (!is_numeric($validateID) || filter_var($validateID, FILTER_VALIDATE_INT, $filter_options) === FALSE) {
    return "NaN";
  }

  $url = \Drupal::config('pubs_entity_type.settings')->get('pubs_details_url');

  try {
    if (0 === substr_compare($url, "/", -1) && explode(' ', get_headers($url . $validateID, 1)[0])[1] == 200) {
      $raw = ISUEOHelpers\Files::fetch_url($url . $validateID);
    } else if (0 === substr_compare($url, ".json", -5) && explode(' ', get_headers($url, 1)[0])[1] == 200) {
      $raw = ISUEOHelpers\Files::fetch_url($url);
    } else if (explode(' ', get_headers($url . "/" . $validateID, 1)[0])[1] == 200) {
      $raw = ISUEOHelpers\Files::fetch_url($url . "/" . $validateID);
    } else {
      $raw = "";
    }
    //$raw = file_get_contents($url);

    $decoded = json_decode($raw);
    if (is_object($decoded) && get_class($decoded) == 'stdClass') {
      $items[] = $decoded;
    } else if (is_array($decoded)) {
      $items = $decoded;
    } else {
      $items = [];
    }
    $found = null;

    foreach ($items as $item) {
      if (property_exists($item, 'ProductID') && $validateID == $item->ProductID) {
        $found = $item;
        break;
      }
    }

    if ($found != null) {
      $existing = \Drupal::entityTypeManager()->getStorage('pubs_entity')->loadByProperties(['field_product_id' => $validateID]);
      if ($curEntity != null && $curEntity->isNew()) {
        if (count($existing) == 0) {
          return $found; //Creating new
        } else {
          return "Entity with ID already exists";
        }
      } else {
        if ($curEntity != null && $curEntity->field_product_id->value != $validateID) {
          return $found; //Editing id
        } elseif ($curEntity != null && $curEntity->field_product_id->value == $validateID) {
          return $found; //Editing other attribute
        } else {
          return "Null entity";
        }
      }
    } else {
      return "Product with ID not found";
    }

  } catch (Exception $e) {
    return "Exception thrown";
  }

  return "Unknown Error";
}


/**
 * Implements hook_rebuild()
 * Rebuild Publication entities
 * Only updates published publications created outside of feeds, as they may not exist in the provided feed
 */
function pubs_entity_type_rebuild() {
  $entities = \Drupal::entityTypeManager()->getStorage('pubs_entity')->loadByProperties(['field_from_feed' => FALSE, 'status' => TRUE]);
  $unpublished = [];
  foreach ($entities as $entity) {
    $passed = validatePubsEntity($entity->field_product_id->value, $entity);
    if (!is_string($passed) && is_object($passed)) {
      $entity->name->value = $passed->Title;
      $entity->field_image_url->value = str_replace('_T', '_F', $passed->ThumbnailURI);
      $pub_date = explode('/', $passed->PubDate);
      $entity->set('field_publication_date', $pub_date[1] . '-' . $pub_date[0] . '-01');
      $entity->save();
/*  Commenting out the lines that unpublish products if they aren't in the API, hoping it fixes an issue where products are unpublished automatically.
 *  If this is the issue, and if we want old products to go away, then we'll need to do something like add a timer and/or counter, something to ensure
 *  the pub is actually gone, and not just that we can't reach the api.
 */
    } else {
      \Drupal::logger('pubs_entity_type')->notice("Publication not found: " . $entity->field_product_id->value . ' - ' . $entity->name->value);
      //$unpublished[] = "<" . $entity->field_product_id->value . "> " . $entity->name->value . " - " . (is_string($passed) ? $passed  : "not an object");
      //$entity->setUnpublished();
      //$entity->save();
    }
  }

//  if (!empty($unpublished)) {
//    \Drupal::logger('pubs_entity_type')->notice("Publications were not found in store feed and were unpublished: " . json_encode($unpublished));
//  }
}

/**
* Implements hook_cron().
*/

function pubs_entity_type_cron() {
  pubs_entity_type_rebuild();
}

/**
* Implements hook_preprocess_HOOK().
*/

function pubs_entity_type_preprocess_block(&$variables) {
  if ($variables['plugin_id'] == 'views_block:publication_entities_admin-block_1') {
    $variables['#attached']['library'][] = 'pubs_entity_type/pubs_entity_type';
  }
}
